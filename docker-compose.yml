---
version: "3"

volumes:
  ipfs:

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.0
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin
    ports:
      - "5432:5432"

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.1
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    logging:
      driver: none

  redis-master:
    container_name: redis-master
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '6379:6379'

  services:
    container_name: services
    image: origin
    build:
      context: .
      dockerfile: Dockerfile
    volumes: &volumes
      - ./lerna.json:/app/lerna.json
      # Mount source code for all packages from host
      - ./packages/contracts/build:/app/packages/contracts/build
      # Core packages
      - ./packages/services/:/app/packages/services/
      - ./packages/graphql/:/app/packages/graphql/
      - ./packages/eventsource/:/app/packages/eventsource/
      - ./packages/ipfs/:/app/packages/ipfs/
      - ./packages/messaging-client/:/app/packages/messaging-client/
      - ./packages/linker-client/:/app/packages/linker-client/
      - ./packages/validator:/app/packages/validator/
      - ./packages/token/:/app/packages/token/
      # Infrastructure packages
      - ./infra/bridge/:/app/infra/bridge/
      - ./infra/discovery/:/app/infra/discovery/
      - ./infra/ipfs-proxy/:/app/infra/ipfs-proxy/
      - ./infra/messaging/:/app/infra/messaging/
      - ./infra/notifications/:/app/infra/notifications/
      - ./infra/growth/:/app/infra/growth/
      - ./infra/identity/:/app/infra/identity/
      - ./infra/linking/:/app/infra/linking/
      # Exclude all node_modules from the host
      - /app/packages/services/node_modules/
      - /app/packages/graphql/node_modules/
      - /app/packages/eventsource/node_modules/
      - /app/packages/ipfs/node_modules/
      - /app/packages/messaging-client/node_modules/
      - /app/packages/linker-client/node_modules/
      - /app/packages/validator/node_modules/
      - /app/packages/token/node_modules/
      - /app/infra/bridge/node_modules/
      - /app/infra/discovery/node_modules/
      - /app/infra/ipfs-proxy/node_modules/
      - /app/infra/messaging/node_modules/
      - /app/infra/notifications/node_modules/
      - /app/infra/growth/node_modules/
      - /app/infra/identity/node_modules/
      - /app/infra/linking/node_modules/
      # IPFS data
      - ipfs:/app/ipfs
    ports:
      # IPFS ports are exposed here for convenience but IPFS should be
      # interacted with via ipfs-proxy
      - "5002:5002"
      - "8080:8080"
      - "8545:8545"
    environment:
      - DOCKER=true
      - DEPLOY_CONTRACTS=true
    command: npm run start --prefix packages/services

  messaging:
    container_name: messaging
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - REDIS_URL=redis://redis-master:6379
    depends_on:
      - postgres
      - redis-master
    ports:
      - "9012:9012"
      - "6647:6647"
    command: npm run start --prefix infra/messaging

  ipfs-proxy:
    container_name: ipfs-proxy
    image: origin
    volumes: *volumes
    ports:
      - "9999:9999"
    environment:
      - IPFS_API_URL=http://services:5002
      - IPFS_GATEWAY_URL=http://services:8080
    command: npm run start --prefix infra/ipfs-proxy

  event-listener:
    container_name: event-listener
    image: origin
    volumes: *volumes
    environment:
      - ARBITRATOR_ACCOUNT=0x821aEa9a577a9b44299B9c15c88cf3087F3b5544
      - AFFILIATE_ACCOUNT=0x0d1d4e623D10F9FBA5Db95830F7d3839406C6AF2
      - ATTESTATION_ACCOUNT=0x99C03fBb0C995ff1160133A8bd210D0E77bCD101
      - BLOCK_EPOCH=
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - DISCORD_WEBHOOK=
      - ELASTICSEARCH=true
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - EMAIL_WEBHOOK=
      - ENVKEY=
      - GCLOUD_PUBSUB_TOPIC=
      - GCLOUD_PROJECT_ID=
      - INDEX_MARKETPLACE=true
      - INDEX_IDENTITY=true
      - INDEX_GROWTH=true
      - IPFS_URL=http://ipfs-proxy:9999
      - TRAIL_BEHIND_BLOCKS=
      - WEB3_URL=http://services:8545
      - WEBHOOK=
    depends_on:
      - postgres
      - elasticsearch
      - services
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q elasticsearch:9200 --
      wait-for.sh -t 0 -q services:8080 --
      npm run migrate --prefix infra/discovery &&
      npm run migrate --prefix infra/growth &&
      npm run migrate --prefix infra/identity &&
      npm run start:listener --prefix infra/discovery"

  discovery:
    container_name: discovery
    image: origin
    volumes: *volumes
    environment:
      # MetaMask account 4 (default local blockchain) aka accounts[3]
      - ARBITRATOR_ACCOUNT=0x821aEa9a577a9b44299B9c15c88cf3087F3b5544
      # MetaMask account 5 (default local blockchain) aka accounts[4]
      - AFFILIATE_ACCOUNT=0x0d1d4e623D10F9FBA5Db95830F7d3839406C6AF2
      # MetaMask account 5 (default local blockchain) aka accounts[4]
      - ATTESTATION_ACCOUNT=0x99C03fBb0C995ff1160133A8bd210D0E77bCD101
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - IPFS_URL=http://ipfs-proxy:9999
      - NETWORK_ID=999
      - WEB3_URL=http://services:8545
      - ENVKEY=
    depends_on:
      - postgres
      - elasticsearch
    ports:
      - "4000:4000"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q elasticsearch:9200 --
      node infra/discovery/devops/es-cli.js createIndex listings &&
      npm run start:discovery --prefix infra/discovery"

  notifications:
    container_name: notifications
    image: origin
    volumes: *volumes
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
    ports:
      - "3456:3456"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      npm run migrate --prefix infra/notifications &&
      npm run start --prefix infra/notifications"

  growth:
    container_name: growth
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ENVKEY=
    depends_on:
      - postgres
    ports:
      - "4001:4001"
    command: npm run start --prefix infra/growth

  bridge:
    container_name: bridge
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - FACEBOOK_CLIENT_ID=
      - FACEBOOK_CLIENT_SECRET=
      # Sendgrid settings for email attestations
      # sendgrid.com
      - SENDGRID_FROM_EMAIL=
      - SENDGRID_API_KEY=
      # Twilio verify API key for phone attestations
      # https://www.twilio.com/console/verify/applications
      - TWILIO_VERIFY_API_KEY
      - TWITTER_CONSUMER_KEY=
      - TWITTER_CONSUMER_SECRET=
      - ENVKEY=
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      npm run migrate --prefix infra/bridge &&
      npm run start --prefix infra/bridge"

  linking:
    container_name: linking
    image: origin
    volumes: *volumes
    environment:
      - HOT_WALLET_PK=C87509A1C067BBDE78BEB793E6FA76530B6382A4C0241E5E4A9EC0A0F44DC0D3
      - ATTESTATION_ACCOUNT=0x99C03fBb0C995ff1160133A8bd210D0E77bCD101
      - DAPP_URL=http://localhost:3000
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - DISCOVERY_SERVER_URL=http://localhost:4000
      - PROVIDER_URL=http://localhost:8545
      - REDIS_URL=redis://redis-master:6379
      - ENVKEY=
    depends_on:
      - postgres
      - redis-master
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      npm run build --prefix packages/origin-js && 
      npm run migrate --prefix infra/linking &&
      npm run start --prefix infra/linking"
