apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
// Don't upload Sentry debug symbols for debug build so that debug builds can be performed without
// a Sentry auth token
if (!getGradle().getStartParameter().getTaskRequests().toString().contains("Debug")) {
    apply from: "../../node_modules/react-native-sentry/sentry.gradle"
}

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.origincatcher"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        // Might be able to remove this after React Native 0.59 is released
        // See: https://github.com/facebook/react-native/issues/2814
        packagingOptions {
            exclude "lib/mips64/**"
            exclude "lib/arm64-v8a/**"
            exclude "lib/x86_64/**"
        }
    }
    signingConfigs {
        release {
            def Properties keyProps = new Properties()
            File keystoreFile = file('../keystores/keystore.properties')
            if (keystoreFile.exists()) {
                keyProps.load(new FileInputStream(keystoreFile))
                storeFile file(keyProps["RELEASE_STORE_FILE"])
                keyAlias keyProps["RELEASE_KEY_ALIAS"]
                storePassword keyProps["RELEASE_STORE_PASSWORD"]
                keyPassword keyProps["RELEASE_KEY_PASSWORD"]
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-sentry')
    implementation project(':react-native-randombytes')
    implementation project(':react-native-push-notification')
    implementation project(':react-native-webview')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:support-core-utils:${rootProject.ext.supportLibVersion}" // RNCamera
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "com.google.firebase:firebase-core:15.0.2"
    implementation "com.google.android.gms:play-services-gcm:15.0.1"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.android.gms.strict-version-matcher-plugin'
apply plugin: 'com.google.gms.google-services'
